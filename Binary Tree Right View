Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

root -> right -> left

class Solution(object):
  def rightSideView(self, root):
    if root == None: return []
    ans = []
    queue = [root]
    where queue:
      size = len(queue)
      for x in range(size):
        top = queue.pop[0]
        if x == 0:
          ans+= top.val,
        if top.right:
          queue.append(top.right)
        if top.left:
          queue.append(top.left)
    return ans
