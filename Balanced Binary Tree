Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

判断一棵树是否为平衡二叉树， 要判断两个条件：
1. 左右子节点的根节点构成的树是否为平衡二叉树
2. 判断左右子节点维根几点的树高度相差是否小于等于1 

#####

class Solution:
  def isBalanced(self, root):
    if root == None:
      return True
    if self.isBalanced(root.left) and self.isBalanced(root.right):
      if abs(self.Height(root.left)-self.Height(root.right))<=1:
        return True
    return False
    
  def Height(self, root):
    if root == None:
      return 0
    return max(self.Height(root.left),self.Height(root.right))+1
